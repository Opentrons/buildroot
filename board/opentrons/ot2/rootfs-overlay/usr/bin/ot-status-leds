#!/usr/bin/env python3

# Monitor system status and update LEDs accordingly
# D2 ) Ethernet LED  : STATUS_LED_1  => Pin15    => bcm22
# D3 ) Wifi LED      : STATUS_LED_2  => Pin27    => bcm00
# D4 ) Heartbeat LED : STATUS_LED_3  => Pin22    => bcm25
# D5 ) UNDEFINED_LED : STATUS_LED_4  => Pin28    => bcm01

import gpiod
import enum
import asyncio
from typing import Optional, Any
from opentrons.system import nmcli


CHIP = gpiod.Chip('gpiochip0')

BLINK_ON_TIME = 0.25    # seconds
BLINK_OFF_TIME = 2      # seconds
NW_STATUS_POLL_SEC = 5


class LineOffset(int, enum.Enum):
    ETH = 22
    WIFI = 0
    HEARTBEAT = 25
    UNDEFINED = 1

    def __init__(self, offset):
        self._line = CHIP.get_line(offset)

    @property
    def line(self):
        return self._line


def init_leds():
    for offset in list(LineOffset):
        offset.line.request(consumer='ot-status-leds',
                            type=gpiod.LINE_REQ_DIR_OUT)
        offset.line.set_value(0)


async def blink_heartbeat_led():
    hb_line = LineOffset.HEARTBEAT.line
    while True:
        hb_line.set_value(1)
        await asyncio.sleep(BLINK_ON_TIME)
        hb_line.set_value(0)
        await asyncio.sleep(BLINK_OFF_TIME)


async def update_nw_status_leds():
    while True:
        eth_status = await nmcli.iface_info(nmcli.NETWORK_IFACES.ETH_LL)
        update_led(eth_status.get('ipAddress'), LineOffset.ETH.line)

        wifi_status = await nmcli.iface_info(nmcli.NETWORK_IFACES.WIFI)
        update_led(wifi_status.get('ipAddress'), LineOffset.WIFI.line)
        await asyncio.sleep(NW_STATUS_POLL_SEC)


def update_led(ip_status: Optional[str], line: Any):
    if ip_status is None:
        line.set_value(0)
    else:
        line.set_value(1)


async def main():
    init_leds()

    heartbeat_task = asyncio.create_task(blink_heartbeat_led())
    update_nw_status_task = asyncio.create_task(update_nw_status_leds())

    await heartbeat_task
    await update_nw_status_task

asyncio.run(main())
