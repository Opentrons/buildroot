"""A script to help update the releases.json file"""

import os
import sys
import json
import argparse

def main(args):
    releases_file = args.releases_file
    version_file = args.version_file
    base_url = args.base_url

    # Get the version from the VERSION file
    if os.path.exists(version_file):
        with open(version_file, "r") as fh:
            version = json.load(fh).get("update_server_version", "0.0.0-dev")
    else:

        print(f"ERROR: version file {version_file} not found!", file=sys.stderr)
        exit(1)

    # Get the releases from the releases file
    releases = {"production": {}}
    if os.path.exists(releases_file):
        print(f"reading releases file - {releases_file}")
        with open(releases_file, "r") as fh:
            releases = json.load(fh)

    # Update the releases dict with the latest version
    releases.get("production", {}).update(
        {
            f"{version}": {
                "fullImage": f"{base_url}/ot2-fullimage.zip",
                "system": f"{base_url}/ot2-system.zip",
                "version": f"{base_url}/VERSION.json",
                "releaseNotes": f"{base_url}/release-notes.md",
            }
        }
    )

    # Save the new releases.json file
    with open(releases_file, "w") as fh:
        json.dump(releases, fh)
    print(
        f"Updated {releases_file} with - {version}: {releases['production'][version]}"
    )


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i",
        "--releases-file",
        help="releases.json file to update, creates it otherwise.",
    )
    parser.add_argument(
        "-v",
        "--version-file",
        required=True,
        help="VERSION.json file generated by the openembedded build.",
    )
    parser.add_argument(
        "-u",
        "--base-url",
        required=True,
        help="root url path in s3 where the output artifact files for this build are hosted.",
    )

    args = parser.parse_args()
    main(args)
